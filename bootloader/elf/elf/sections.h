/*
 * Таблица заголовков секций объектного файла позволяет найти в нём
 * собственно секциии. Это массив структур Elf32_Shdr или Elf64_Shd,
 * определение которых дано ниже. Индекс в таблице заголовков секций
 * является индексом в этом массиве.
 *
 * Поле e_shoff заголовка объектного файла указывает смещение в
 * байтах от начала файла до таблицы заголовков секций. Поле e_shnum
 * обычно сообщает, сколько записей содержит таблица заголовков секций.
 * Поле e_shentsize задаёт размер каждой записи в байтах.
 *
 * Секции содержат всю информацию в объектном файле, за исключением
 * заголовка ELF, таблицы заголовков программы и таблицы заголовков секций.
 * Кроме того, секции объектных файлов удовлетворяют нескольким условиям:
 *
 * - Каждая секция в объектном файле имеет ровно один заголовок,
 *   описывающий её. Могут существовать заголовки секций, которые не
 *   связаны с какой-либо секцией.
 *
 * - Каждая секция занимает одну непрерывную (возможно, пустую)
 *   последовательность байтов внутри файла.
 *
 * - Секции в файле не могут пересекаться. Ни один байт в файле не может
 *   находиться более чем в одной секции.
 *
 * - Объектный файл может иметь неразмеченное пространство.
 *   Различные заголовки и секции могут не покрывать каждый байт
 *   в объектном файле. Содержимое неразмеченных данных не определено.
 *
 * * Примечание:
 *   Частым примером неактивного пространства является выравнивающее
 *   заполнение (padding), размещаемое между секциями для обеспечения
 *   правильного выравнивания следующей секции.
 *
 * Если количество секций больше или равно SHN_LORESERVE (0xff00),
 * поле e_shnum имеет значение SHN_UNDEF (0), а фактическое количество
 * записей в таблице заголовков секций содержится в поле sh_size
 * заголовка секции с индексом 0 (в противном случае, поле sh_size
 * начальной записи содержит 0).
 *
 * ---------------------------------------------------------------------
 * 3.1. Специальные индексы секций
 * ---------------------------------------------------------------------
 * Некоторые индексы таблицы заголовков секций зарезервированы
 * в контекстах, где размер индекса ограничен, например, в поле
 * st_shndx записи таблицы символов и в полях e_shnum и e_shstrndx
 * заголовка ELF. В таких контекстах зарезервированные значения
 * не представляют реальные секции в объектном файле. Также в этих
 * контекстах управляющее значение указывает,
 * что фактический индекс секции следует искать в другом месте,
 * в поле большего размера.
 */

#define SHN_UNDEF         0x0    // Неопределённая, отсутствующая,
                                 // нерелевантная или иным образом
                                 // бессмысленная ссылка на секцию.
                                 // Например, символ, определённый
                                 // относительно секции с номером
                                 // SHN_UNDEF, является неопределенным
                                 // символом.
                                 //
                                 // Примечание:
                                 // Хотя индекс 0 зарезервирован как
                                 // неопределенное значение, таблица
                                 // заголовков секций содержит запись для
                                 // индекса 0. Если поле e_shnum заголовка
                                 // ELF говорит, что файл имеет 6 записей,
                                 // они будут иметь индексы от 0 до 5.


#define SHN_LORESERVE     0xff00 // Нижняя граница диапазона
                                 // зарезервированных индексов.

#define SHN_LOPROC        0xff00 // Начало диапазона индексов,
                                 // зарезервированных для семантики,
                                 // специфичной для процессора.

#define SHN_HIPROC        0xff1f // Конец диапазона индексов для
                                 // процессорно-специфичной семантики.

#define SHN_LOOS          0xff20 // Начало диапазона индексов,
                                 // зарезервированных для семантики,
                                 // специфичной для операционной системы.

#define SHN_HIOS          0xff3f // Конец диапазона индексов для
                                 // ОС-специфичной семантики.

#define SHN_ABS           0xfff1 // Указывает абсолютные значения для
                                 // соответствующей ссылки. Например,
                                 // символы, определённые относительно
                                 // секции SHN_ABS, имеют абсолютные
                                 // значения и не подвержены перемещению.

#define SHN_COMMON        0xfff2 // Символы, определенные относительно
                                 // этой секции, являются общими
                                 // символами (common symbols), такими
                                 // как FORTRAN COMMON или неразмещённые
                                 // внешние переменные C.

#define SHN_XINDEX        0xffff // Управляющее значение. Указывает, что
                                 // фактический индекс заголовка секции
                                 // слишком велик для содержащего его
                                 // поля и должен быть найден в другом
                                 // месте (зависит от структуры, где он
                                 // появляется).

#define SHN_HIRESERVE     0xffff // Верхняя граница диапазона
                                 // зарезервированных индексов.
                                 // Система резервирует индексы между
                                 // SHN_LORESERVE и SHN_HIRESERVE
                                 // включительно; эти значения не
                                 // ссылаются на таблицу заголовков
                                 // секций. Таблица заголовков секций
                                 // не содержит записей для
                                 // зарезервированных индексов.
/*
 * ---------------------------------------------------------------------
 * 3.2. Тип секции
 * ---------------------------------------------------------------------
 * Тип секции определяет её семантику и указывается в поле sh_type
 * заголовка.
 */
#define SHT_NULL           0          // Неактивный заголовок секции.
                                      // Этот заголовок не имеет связанной
                                      // с ним секции. Другие поля
                                      // заголовка имеют неопределенные
                                      // значения.

#define SHT_PROGBITS       1          // Секция содержит информацию,
                                      // определённую программой, формат
                                      // и значение которой определяются
                                      // исключительно самой программой.

#define SHT_SYMTAB         2          // Секция содержит таблицу символов.
#define SHT_DYNSYM         11         // То же.
                                      // В настоящее время объектный файл
                                      // может иметь только по одной секции
                                      // каждого типа. SHT_SYMTAB обычно
                                      // предоставляет символы для
                                      // редактирования связей (компоновки),
                                      // но также может использоваться для
                                      // динамического связывания. SHT_DYNSYM
                                      // содержит минимальный набор символов
                                      // для динамической компоновки, чтобы
                                      // сэкономить место.

#define SHT_STRTAB         3          // Секция содержит таблицу строк.
                                      // Объектный файл может иметь несколько
                                      // секций с таблицами строк.

#define SHT_RELA           4          // Секция содержит записи о перемещении
                                      // с явными слагаемыми (addends), такие как
				      // Elf32_Rela или Elf64_Rela.

#define SHT_HASH           5          // Секция содержит хеш-таблицу символов.

#define SHT_DYNAMIC        6          // Секция содержит информацию для
                                      // динамической компоновки.

#define SHT_NOTE           7          // Секция содержит информацию, которая
                                      // каким-либо образом помечает файл.

#define SHT_NOBITS         8          // Секция этого типа не занимает места
                                      // в файле, но в остальном похожа
                                      // на SHT_PROGBITS. Хотя эта секция
                                      // не содержит байтов, поле sh_offset
                                      // содержит концептуальное смещение
                                      // в файле.

#define SHT_REL            9          // Секция содержит записи о перемещении
                                      // без явных слагаемых, такие как
                                      // Elf32_Rel или Elf64_Rel.

#define SHT_SHLIB          10         // Этот тип секции зарезервирован,
                                      // но его семантика не определена.

#define SHT_INIT_ARRAY     14         // Массив указателей на функции
                                      // инициализации.

#define SHT_FINI_ARRAY     15         // Массив указателей на функции
                                      // завершения.

#define SHT_PREINIT_ARRAY  16         // Массив указателей на функции,
                                      // вызываемые до всех других функций
                                      // инициализации.

#define SHT_GROUP          17         // Секция определяет группу секций.
                                      // Группа секций — это набор связанных
                                      // секций, которые компоновщик должен
                                      // обрабатывать особым образом.
                                      // Может появляться только в
                                      // перемещаемых объектах (ET_REL).

#define SHT_SYMTAB_SHNDX   18         // Связана с таблицей символов и
                                      // требуется, если какой-либо из
                                      // индексов секций, на которые
                                      // ссылается эта таблица символов,
                                      // содержит управляющее значение
				      // SHN_XINDEX.

#define SHT_RELR           19         // Секция содержит массив записей
                                      // о перемещении, используемых для
                                      // кодирования относительных
                                      // перемещений, не требующих явных
                                      // слагаемых.

#define SHT_LOOS           0x60000000 // Начало диапазона, зарезервированного
                                      // для ОС-специфичной семантики.

#define SHT_HIOS           0x6fffffff // Конец диапазона для ОС-специфичной
                                      // семантики.

#define SHT_LOPROC         0x70000000 // Начало диапазона, зарезервированного
                                      // для процессорно-специфичной
                                      // семантики.

#define SHT_HIPROC         0x7fffffff // Конец диапазона для процессорно-
                                      // специфичной семантики.

#define SHT_LOUSER         0x80000000 // Нижняя граница диапазона индексов,
                                      // зарезервированных для приложений.

#define SHT_HIUSER         0xffffffff // Верхняя граница диапазона индексов,
                                      // зарезервированных для приложений.
                                      // Типы секций между SHT_LOUSER и
                                      // SHT_HIUSER могут использоваться
                                      // приложением без конфликтов с
                                      // системными типами секций.
/*
 * ---------------------------------------------------------------------
 * 3.3. Флаги секций
 * ---------------------------------------------------------------------
 *  Флаги --- это атрибуты секций, которые могут быть включены
 *  или выключены. В случае, если флаг неприменим к данной секции,
 *  он тоже должен быть выключен. Они определяются в поле sh_flags
 *  заголовка секции.
 *
 *  Ниже даны битовые маски флагов.
 */
#define SHF_WRITE             0x1        // Секция содержит данные, которые
                                         // должны быть доступны для записи
                                         // во время выполнения процесса.

#define SHF_ALLOC             0x2        // Секция занимает память во время
                                         // выполнения процесса. Некоторые
                                         // управляющие секции не находятся
                                         // в образе памяти объектного файла;
                                         // для таких секций этот атрибут
                                         // выключен.

#define SHF_EXECINSTR         0x4        // Секция содержит исполняемые
                                         // машинные инструкции.

#define SHF_MERGE             0x10       // Данные в секции могут быть
                                         // объединены для устранения
                                         // дублирования.

#define SHF_STRINGS           0x20       // Элементы данных в секции
                                         // представляют собой строки,
                                         // завершающиеся нулевым символом.

#define SHF_INFO_LINK         0x40       // Поле sh_info этого заголовка
                                         // секции содержит индекс в
                                         // таблице заголовков секций.

#define SHF_LINK_ORDER        0x80       // Этот флаг добавляет специальные
                                         // требования к порядку для
                                         // компоновщиков.

#define SHF_OS_NONCONFORMING  0x100      // Эта секция требует специальной
                                         // обработки, специфичной для ОС,
                                         // для избежания некорректного
                                         // поведения.

#define SHF_GROUP             0x200      // Секция является членом
                                         // (возможно, единственным)
                                         // группы секций.

#define SHF_TLS               0x400      // Секция содержит локальное
                                         // хранилище потока.

#define SHF_COMPRESSED        0x800      // Этот флаг идентифицирует секцию,
                                         // содержащую сжатые данные.

#define SHF_MASKOS            0x0ff00000 // Все биты, включённые в эту маску,
                                         // зарезервированы для семантики,
                                         // специфичной для операционной
                                         // системы.

#define SHF_MASKPROC          0xf0000000 // Все биты, включённые в эту маску,
                                         // зарезервированы для семантики,
                                         // специфичной для процессора.

/*
 * ---------------------------------------------------------------------
 * 3.4. Запись в таблице заголовков секций
 * ---------------------------------------------------------------------
 * Заголовок секции имеет следующую структуру:
 */

// 32-разрядная версия
// Отличается от 64-разрядной размерами полей
typedef struct {
    Elf32_Word  sh_name;
    Elf32_Word  sh_type;
    Elf32_Word  sh_flags;
    Elf32_Addr  sh_addr;
    Elf32_Off   sh_offset;
    Elf32_Word  sh_size;
    Elf32_Word  sh_link;
    Elf32_Word  sh_info;
    Elf32_Word  sh_addralign;
    Elf32_Word  sh_entsize;
} Elf32_Shdr;

// 64-разрядная версия
typedef struct {
    /*
     * Имя секции.
     * Это поле содержит имя секции. Его значением является
     * индекс в таблице строк заголовков секций, указывающий
     * на расположение строки, завершающейся нулевым символом.
     */
    Elf64_Word  sh_name;
    /*
     * Тип секции.
     * Это поле классифицирует содержимое и семантику секции.
     * См. SHT_.
     */
    Elf64_Word  sh_type;
    /*
     * Флаги секции.
     * Поле sh_flags заголовка секции содержит 1-битные флаги,
     * описывающие атрибуты секции. Определённые значения приведены
     * в следующей таблице; другие значения зарезервированы.
     *
     * Если бит флага установлен в sh_flags, атрибут включён для
     * секции. В противном случае атрибут выключен или не применяется.
     * Неопределённые атрибуты устанавливаются в ноль.
     *
     * См. SHF_.
     */
    Elf64_Xword sh_flags;
    /*
     * Виртуальный адрес.
     * Если секция будет присутствовать в образе памяти процесса,
     * это поле содержит адрес, по которому должен располагаться
     * первый байт секции. В противном случае поле содержит 0.
     */
    Elf64_Addr  sh_addr;
    /*
     * Смещение в файле.
     * Значение этого поля указывает смещение в байтах от начала
     * файла до первого байта в секции. Один тип секции,
     * SHT_NOBITS (описан ниже), не занимает места в файле,
     * и его поле sh_offset указывает на концептуальное
     * размещение в файле.
     */
    Elf64_Off   sh_offset;
    /*
     * Размер секции.
     * Это поле указывает размер секции в байтах. Если тип
     * секции не SHT_NOBITS, секция занимает sh_size байт
     * в файле. Секция типа SHT_NOBITS может иметь ненулевой
     * размер, но не занимает места в файле.
     */
    Elf64_Xword sh_size;
    /*
     * Связь с другой секцией.
     * Это поле содержит индекс в таблице заголовков секций,
     * интерпретация которого зависит от типа секции.
     */
    Elf64_Word  sh_link;
    /*
     * Дополнительная информация.
     * Это поле содержит дополнительную информацию,
     * интерпретация которой зависит от типа секции.
     * Если поле sh_flags для этого заголовка секции
     * включает атрибут SHF_INFO_LINK, то это поле
     * представляет собой индекс в таблице
     * заголовков секций.
     */
    Elf64_Word  sh_info;
    /*
     * Выравнивание адреса.
     * Некоторые секции имеют требования к выравниванию адреса.
     * Например, если секция содержит двойное слово,
     * система должна обеспечить выравнивание по границе двойного
     * слова для всей секции. Значение sh_addr должно быть
     * сравнимо с 0 по модулю значения sh_addralign.
     * В настоящее время допускаются только 0 и положительные
     * целые степени двойки. Значения 0 и 1 означают, что
     * у секции нет требований к выравниванию.
     */
    Elf64_Xword sh_addralign;
    /*
     * Размер элемента таблицы.
     * Некоторые секции содержат таблицу записей фиксированного
     * размера, например, таблицу символов. Для таких секций
     * это поле указывает размер каждой записи в байтах.
     * Поле содержит 0, если секция не содержит таблицу
     * записей фиксированного размера.
     */
    Elf64_Xword sh_entsize;
} Elf64_Shdr;

/*
 * ---------------------------------------------------------------------
 * 3.5. Поля sh_link и sh_info
 * ---------------------------------------------------------------------
 * Два поля в заголовке секции, sh_link и sh_info, содержат
 * специальную информацию, зависящую от типа секции.
 *
 *
 *              Интерпретация полей sh_link и sh_info
 * +------------------+--------------------------------+--------------------------------+
 * |      sh_type     |            sh_link             |             sh_info            |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_DYNAMIC      | Индекс заголовка секции        | 0                              |
 * |                  | таблицы строк, используемой    |                                |
 * |                  | записями в этой секции.        |                                |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_HASH         | Индекс заголовка секции        | 0                              |
 * |                  | таблицы символов, к которой    |                                |
 * |                  | применяется хеш-таблица.       |                                |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_REL          | Индекс заголовка секции        | Индекс заголовка секции,       |
 * | SHT_RELA         | связанной таблицы символов.    | к которой применяются          |
 * |                  |                                | перемещения.                   |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_SYMTAB       | Индекс заголовка секции        | На единицу больше индекса      |
 * | SHT_DYNSYM       | связанной таблицы строк.       | последнего локального символа  |
 * |                  |                                | (с привязкой STB_LOCAL).       |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_GROUP        | Индекс заголовка секции        | Индекс записи в связанной      |
 * |                  | связанной таблицы символов.    | таблице символов. Имя          |
 * |                  |                                | указанной записи служит        |
 * |                  |                                | сигнатурой для группы секций.  |
 * +------------------+--------------------------------+--------------------------------+
 * | SHT_SYMTAB_SHNDX | Индекс заголовка секции        | 0                              |
 * |                  | связанной таблицы символов.    |                                |
 * +------------------+--------------------------------+--------------------------------+
 *
 *
 * ---------------------------------------------------------------------
 * 3.6. Запись в таблице заголовков секций с индексом 0
 * ---------------------------------------------------------------------
 * Как упоминалось ранее, заголовок секции с индексом 0 (SHN_UNDEF)
 * существует, даже если этот индекс обозначает неопределенные
 * ссылки на секции. Эта запись содержит следующие значения.
 *
 *
 *      Значения полей в заголовке секции с индексом 0
 * +--------------+-----------------+-------------------------------------+
 * |     Поле     |    Значение     |             Примечание              |
 * +--------------+-----------------+-------------------------------------+
 * | sh_name      | 0               | Нет имени                           |
 * +--------------+-----------------+-------------------------------------+
 * | sh_type      | SHT_NULL        | Неактивна                           |
 * +--------------+-----------------+-------------------------------------+
 * | sh_flags     | 0               | Нет флагов                          |
 * +--------------+-----------------+-------------------------------------+
 * | sh_addr      | 0               | Нет адреса                          |
 * +--------------+-----------------+-------------------------------------+
 * | sh_offset    | 0               | Нет смещения                        |
 * +--------------+-----------------+-------------------------------------+
 * | sh_size      | Не определено   | Если не 0, фактическое количество   |
 * |              |                 | записей в таблице заголовков секций |
 * +--------------+-----------------+-------------------------------------+
 * | sh_link      | Не определено   | Если не 0, индекс секции таблицы    |
 * |              |                 | строк имён секций                   |
 * +--------------+-----------------+-------------------------------------+
 * | sh_info      | 0               | Нет вспомогательной информации      |
 * +--------------+-----------------+-------------------------------------+
 * | sh_addralign | 0               | Нет выравнивания                    |
 * +--------------+-----------------+-------------------------------------+
 * | sh_entsize   | 0               | Нет записей                         |
 * +--------------+-----------------+-------------------------------------+
 *
 * ---------------------------------------------------------------------
 * 3.7. Сжатые секции
 * ---------------------------------------------------------------------
 *
 * Флаг заголовка секции SHF_COMPRESSED указывает на секцию,
 * которая была сжата для экономии места в объектном файле.
 *
 * Все перемещения в сжатую секцию указывают
 * смещения в несжатых данных секции. Поэтому необходимо
 * распаковать данные секции перед применением перемещений.
 * Каждая сжатая секция определяет алгоритм независимо.
 * Допустимо, чтобы разные секции в одном объектном файле
 * использовали разные алгоритмы сжатия.
 *
 * Сжатые секции начинаются со структуры заголовка сжатия,
 * которая идентифицирует алгоритм сжатия.
 */

/*
 * Заголовок сжатия
 */
typedef struct {
    Elf32_Word  ch_type;
    Elf32_Word  ch_size;
    Elf32_Word  ch_addralign;
} Elf32_Chdr;

typedef struct {
    /*
     * Тип сжатия.
     * Это поле указывает алгоритм сжатия. Поддерживаемые
     * алгоритмы и их описания перечислены ниже.
     */
    Elf64_Word  ch_type;
    /* Зарезервировано */
    Elf64_Word  ch_reserved;
    /*
     * Размер несжатых данных.
     * Это поле предоставляет размер несжатых данных в байтах.
     */
    Elf64_Xword ch_size;
    /*
     * Выравнивание несжатых данных.
     * Указывает требуемое выравнивание для несжатых данных.
     */
    Elf64_Xword ch_addralign;
} Elf64_Chdr;

/*
 * Поля sh_size и sh_addralign заголовка сжатой секции отражают
 * требования самой сжатой секции. Поля ch_size и ch_addralign
 * в заголовке сжатия предоставляют соответствующие значения для
 * несжатых данных, тем самым предоставляя значения, которые
 * имели бы sh_size и sh_addralign, если бы секция не была сжата.
 *
 * Структура и интерпретация данных, следующих за заголовком
 * сжатия, специфичны для каждого алгоритма и определяются
 * ниже для каждого значения ch_type. Эта область может содержать
 * специфичные для алгоритма параметры и выравнивающее
 * заполнение в дополнение к сжатым данным.
 *
 * Поле ch_type заголовка сжатия определяет используемый
 * алгоритм сжатия, как показано в следующей таблице.
 */

/*
 * Типы сжатия ELF, ch_type
 */
#define ELFCOMPRESS_ZLIB     1          // Данные секции сжаты с помощью
                                        // алгоритма ZLIB. Сжатые байты
                                        // ZLIB начинаются сразу после
                                        // заголовка сжатия и простираются
                                        // до конца секции.

#define ELFCOMPRESS_ZSTD     2          // Данные секции сжаты с помощью
                                        // алгоритма Zstandard. Сжатые байты
                                        // Zstandard начинаются сразу после
                                        // заголовка сжатия и простираются
                                        // до конца секции.

#define ELFCOMPRESS_LOOS     0x60000000 // Начало диапазона, зарезервированного
                                        // для ОС-специфичной семантики.

#define ELFCOMPRESS_HIOS     0x6fffffff // Конец диапазона для ОС-специфичной
                                        // семантики.

#define ELFCOMPRESS_LOPROC   0x70000000 // Начало диапазона, зарезервированного
                                        // для процессорно-специфичной
                                        // семантики.

#define ELFCOMPRESS_HIPROC   0x7fffffff // Конец диапазона для процессорно-
                                        // специфичной семантики.

/*
 * ---------------------------------------------------------------------
 * 3.8. Правила связывания (компоновки) неопознанных секций
 * ---------------------------------------------------------------------
 *
 * Если редактор связей (компоновщик) встречает секции, заголовки
 * которых содержат специфичные для ОС значения в полях sh_type или
 * sh_flags, которые он не распознает, компоновщик должен
 * объединять эти секции, как описано ниже.
 *
 * Если биты sh_flags секции включают атрибут SHF_OS_NONCONFORMING,
 * это означает, что секция требует специальных знаний для правильной
 * обработки, и компоновщик должен отвергнуть объектный файл,
 * содержащий эту секцию, с ошибкой.
 *
 * Неопознанные секции, не имеющие атрибута SHF_OS_NONCONFORMING,
 * объединяются в двухфазном процессе. При объединении секций
 * компоновщик должен соблюдать ограничения по выравниванию
 * входных секций (заданные полем sh_addralign), при необходимости
 * добавляя между секциями нулевые байты для заполнения, и создавая
 * комбинацию с максимальным требованием к выравниванию из всех
 * её компонент.
 *
 * На первом этапе входные секции, совпадающие по имени, типу и флагам
 * атрибутов, должны быть объединены в единые секции. Порядок
 * объединения должен удовлетворять требованиям любых известных
 * атрибутов входных секций (например, SHF_MERGE и SHF_LINK_ORDER).
 * Если иное не оговорено, секции должны выводиться в порядке их
 * поступления.
 *
 * На втором этапе секции должны быть назначены сегментам или другим
 * единицам на основе их флагов атрибутов. Секции каждого конкретного
 * неопознанного типа должны быть назначены одной и той же единице,
 * если это не предотвращается несовместимыми флагами, и внутри
 * единицы секции одного и того же неопознанного типа должны быть
 * размещены вместе, если это возможно.
 *
 * Неспецифичная для ОС обработка (например, перемещение) должна
 * применяться к неопознанным типам секций. Выходная таблица
 * заголовков секций, если она присутствует, должна содержать записи
 * для неизвестных секций. Любые неопознанные флаги атрибутов
 * секций должны быть удалены.
 *
 * * Примечание:
 *   Рекомендуется, чтобы компоновщики следовали тому же двухфазному
 *   подходу к упорядочиванию при связывании секций известных типов.
 *   Заполнение между такими секциями может иметь значения, отличные
 *   от нуля, где это уместно.
 */

/*
 * ---------------------------------------------------------------------
 * 3.9. Группы секций
 * ---------------------------------------------------------------------
 * Некоторые секции существуют во взаимосвязанных группах. Например,
 * вынесенное определение встраиваемой функции может требовать,
 * помимо секции с её исполняемыми инструкциями, секцию данных
 * только для чтения, содержащую литералы, на которые она ссылается,
 * одну или несколько секций с отладочной информацией и другие
 * информационные секции. Более того, между этими секциями могут
 * существовать внутренние ссылки, которые потеряли бы смысл, если бы
 * одна из секций была удалена или заменена дубликатом из другого
 * объекта. Поэтому такие группы должны включаться или исключаться
 * из результирующего скомпонованного объекта как единое целое.
 * Секция не может быть членом более чем одной группы.
 *
 * Секция типа SHT_GROUP определяет такую группировку секций. Имя
 * символа из одной из таблиц символов содержащего объекта
 * предоставляет сигнатуру для группы секций. Заголовок секции
 * SHT_GROUP указывает на идентифицирующую запись символа, как
 * описано выше: поле sh_link содержит индекс заголовка секции
 * таблицы символов, которая содержит эту запись. Поле sh_info
 * содержит индекс этой идентифицирующей записи в таблице символов.
 * Поле sh_flags заголовка секции содержит 0. Имя секции (sh_name)
 * не указывается.
 *
 * Ссылаемый символ-сигнатура не имеет ограничений. Например,
 * содержащая его таблица символов не обязана быть членом группы.
 *
 * Данные секции SHT_GROUP представляют собой массив записей типа
 * Elf32_Word/Elf64_Word. Первая запись — это слово с флагами.
 * Остальные записи — это последовательность индексов заголовков
 * секций.
 */

/*
 * Флаги групп секций
 */
#define GRP_COMDAT      0x1        // Это COMDAT-группа. Она может дублировать
                                   // другую COMDAT-группу в другом объектном
                                   // файле, где дублирование определяется
                                   // наличием той же сигнатуры группы.
                                   // В таких случаях компоновщик может
                                   // сохранить только одну из дублирующихся
                                   // групп, а члены остальных групп должны
                                   // быть отброшены.

#define GRP_MASKOS      0x0ff00000 // Все биты, включенные в эту маску,
                                   // зарезервированы для семантики,
                                   // специфичной для операционной системы.

#define GRP_MASKPROC    0xf0000000 // Все биты, включенные в эту маску,
                                   // зарезервированы для семантики,
                                   // специфичной для процессора.

/*
 * Индексы заголовков секций в секции SHT_GROUP идентифицируют
 * секции, составляющие группу. Каждая такая секция должна иметь
 * установленный флаг SHF_GROUP в своём поле sh_flags заголовка
 * секции. Если компоновщик решает удалить группу секций, он
 * должен удалить всех членов этой группы.
 *
 * * Примечание:
 *   Это требование не означает, что специальное поведение, такое
 *   как удаление отладочной информации, требует удаления секций,
 *   на которые эта информация ссылается, даже если они являются
 *   частью той же группы.
 *
 * Для облегчения удаления группы без оставления висячих ссылок
 * и с минимальной обработкой таблицы символов, должны
 * соблюдаться следующие правила:
 *
 * - Запись в таблице символов с привязкой STB_GLOBAL или STB_WEAK,
 *   определенная относительно одной из секций группы и содержащаяся
 *   в таблице символов, не являющейся частью группы, должна быть
 *   преобразована в неопределённый символ (её индекс секции должен
 *   быть изменен на SHN_UNDEF), если члены группы отбрасываются.
 *   Ссылки на эту запись извне группы разрешены.
 *
 * - Запись в таблице символов с привязкой STB_LOCAL, определенная
 *   относительно одной из секций группы и содержащаяся в таблице
 *   символов, не являющейся частью группы, должна быть отброшена,
 *   если члены группы отбрасываются. Ссылки на эту запись извне
 *   группы не разрешены.
 *
 * - Неопределенный символ, на который ссылаются только из одной
 *   или нескольких секций, являющихся частью определённой группы,
 *   и который содержится в таблице символов, не являющейся частью
 *   группы, не удаляется при отбрасывании членов группы.
 *
 * - Не должно быть несимвольных ссылок на секции, составляющие
 *   группу, извне группы. Например, использование индекса заголовка
 *   секции-члена группы в поле sh_link или sh_info.
 *
 * ---------------------------------------------------------------------
 * 3.10. Специальные секции
 * ---------------------------------------------------------------------
 *
 * Различные секции содержат программную и управляющую информацию.
 * В следующей таблице показаны секции, которые используются
 * системой и имеют указанные типы и атрибуты.
 *
 *
 *                        Специальные секции
 * +----------------+-------------------+---------------------------------+
 * |      Имя       |       Тип         |             Атрибуты            |
 * +----------------+-------------------+---------------------------------+
 * | .bss           | SHT_NOBITS        | SHF_ALLOC + SHF_WRITE           |
 * | .comment       | SHT_PROGBITS      | нет                             |
 * | .data          | SHT_PROGBITS      | SHF_ALLOC + SHF_WRITE           |
 * | .data1         | SHT_PROGBITS      | SHF_ALLOC + SHF_WRITE           |
 * | .debug         | SHT_PROGBITS      | нет                             |
 * | .dynamic       | SHT_DYNAMIC       | см. ниже                        |
 * | .dynstr        | SHT_STRTAB        | SHF_ALLOC                       |
 * | .dynsym        | SHT_DYNSYM        | SHF_ALLOC                       |
 * | .fini          | SHT_PROGBITS      | SHF_ALLOC + SHF_EXECINSTR       |
 * | .fini_array    | SHT_FINI_ARRAY    | SHF_ALLOC + SHF_WRITE           |
 * | .got           | SHT_PROGBITS      | см. ниже                        |
 * | .hash          | SHT_HASH          | SHF_ALLOC                       |
 * | .init          | SHT_PROGBITS      | SHF_ALLOC + SHF_EXECINSTR       |
 * | .init_array    | SHT_INIT_ARRAY    | SHF_ALLOC + SHF_WRITE           |
 * | .interp        | SHT_PROGBITS      | см. ниже                        |
 * | .line          | SHT_PROGBITS      | нет                             |
 * | .note          | SHT_NOTE          | нет                             |
 * | .plt           | SHT_PROGBITS      | см. ниже                        |
 * | .preinit_array | SHT_PREINIT_ARRAY | SHF_ALLOC + SHF_WRITE           |
 * | .rel<имя>      | SHT_REL           | см. ниже                        |
 * | .rela<имя>     | SHT_RELA          | см. ниже                        |
 * | .relr.dyn      | SHT_RELR          | SHF_ALLOC                       |
 * | .rodata        | SHT_PROGBITS      | SHF_ALLOC                       |
 * | .rodata1       | SHT_PROGBITS      | SHF_ALLOC                       |
 * | .shstrtab      | SHT_STRTAB        | нет                             |
 * | .strtab        | SHT_STRTAB        | см. ниже                        |
 * | .symtab        | SHT_SYMTAB        | см. ниже                        |
 * | .symtab_shndx  | SHT_SYMTAB_SHNDX  | см. ниже                        |
 * | .tbss          | SHT_NOBITS        | SHF_ALLOC+SHF_WRITE+SHF_TLS     |
 * | .tdata         | SHT_PROGBITS      | SHF_ALLOC+SHF_WRITE+SHF_TLS     |
 * | .text          | SHT_PROGBITS      | SHF_ALLOC + SHF_EXECINSTR       |
 * +----------------+-------------------+---------------------------------+
 *
 * .bss
 * Эта секция содержит неинициализированные данные, которые вносят
 * вклад в образ памяти программы. По определению, система
 * инициализирует эти данные нулями при запуске программы. Секция
 * не занимает места в файле, что указывается типом секции SHT_NOBITS.
 *
 * .comment
 * Эта секция содержит информацию о контроле версий.
 *
 * .data и .data1
 * Хранят инициализированные данные программы
 * (например, глобальные переменные со стартовыми значениями),
 * которые загружаются в память при исполнении.
 *
 * .debug
 * Эта секция содержит информацию для символьной отладки. Содержимое
 * не специфицировано. Все имена секций с префиксом .debug
 * зарезервированы для будущего использования в ABI.
 *
 * .dynamic
 * Эта секция содержит информацию для динамического связывания.
 * Атрибуты секции будут включать бит SHF_ALLOC. Установка бита
 * SHF_WRITE зависит от процессора.
 *
 * .dynstr
 * Эта секция содержит строки, необходимые для динамического
 * связывания, чаще всего это строки, представляющие имена,
 * связанные с записями в таблице символов.
 *
 * .dynsym
 * Эта секция содержит таблицу символов для динамического связывания.
 *
 * .fini
 * Эта секция содержит исполняемые инструкции, которые вносят
 * вклад в код завершения процесса. То есть, когда программа
 * завершается нормально, система организует выполнение кода
 * в этой секции.
 *
 * .fini_array
 * Эта секция содержит массив указателей на функции, который
 * составляет единый массив завершения для исполняемого файла
 * или разделяемого объекта, содержащего эту секцию.
 *
 * .got
 * Эта секция содержит глобальную таблицу смещений.
 *
 * .hash
 * Эта секция содержит хэш-таблицу символов.
 *
 * .init
 * Эта секция содержит исполняемые инструкции, которые вносят
 * вклад в код инициализации процесса. Когда программа начинает
 * выполняться, система организует выполнение кода в этой секции
 * перед вызовом основной точки входа программы (main для программ на C).
 *
 * .init_array
 * Эта секция содержит массив указателей на функции, который
 * составляет единый массив инициализации для исполняемого файла
 * или разделяемого объекта, содержащего эту секцию.
 *
 * .interp
 * Эта секция содержит путь к интерпретатору программы.
 *
 * .line
 * Эта секция содержит информацию о номерах строк для символьной
 * отладки, которая описывает соответствие между исходной
 * программой и машинным кодом. Содержимое не специфицировано.
 *
 * .note
 * Эта секция содержит информацию в формате, описанном ранее.
 *
 * .plt
 * Эта секция содержит таблицу связывания процедур.
 *
 * .preinit_array
 * Эта секция содержит массив указателей на функции, который
 * составляет единый массив предварительной инициализации для
 * исполняемого файла или разделяемого объекта.
 *
 * .rel<имя> и .rela<имя>
 * Эти секции содержат информацию о перемещениях.
 *
 * .relr.dyn
 * Эта секция содержит информацию об относительном перемещении для
 * динамического связывания, компактно закодированную.
 *
 * .rodata и .rodata1
 * Эти секции содержат данные только для чтения, которые обычно
 * вносят вклад в незаписываемый сегмент в образе процесса.
 *
 * .shstrtab
 * Эта секция содержит имена секций.
 *
 * .strtab
 * Эта секция содержит строки, чаще всего это строки, представляющие
 * имена, связанные с записями в таблице символов.
 *
 * .symtab
 * Эта секция содержит таблицу символов.
 *
 * .symtab_shndx
 * Эта секция содержит специальный массив индексов секций таблицы
 * символов, как описано выше.
 *
 * .tbss
 * Эта секция содержит неинициализированные локальные данные потока,
 * которые вносят вклад в образ памяти программы.
 *
 * .tdata
 * Эта секция содержит инициализированные локальные данные потока.
 *
 * .text
 * Эта секция содержит текст --- исполняемые инструкции программы.
 *
 * Имена секций с префиксом в виде точки (.) зарезервированы для
 * системы, хотя приложения могут использовать эти секции, если их
 * существующие значения удовлетворительны. Приложения могут
 * использовать имена без префикса, чтобы избежать конфликтов с
 * системными секциями. Формат объектного файла позволяет определять
 * секции, не показанные в предыдущем списке. Объектный файл может
 * иметь более одной секции с одинаковым именем.
 *
 * Имена секций, зарезервированные для архитектуры процессора,
 * формируются путём добавления аббревиатуры имени архитектуры
 * перед именем секции. Имя должно быть взято из имен архитектур,
 * используемых для e_machine. Например, .FOO.psect - это секция
 * psect, определенная архитектурой FOO. Существующие расширения
 * называются своими историческими именами, к ним относятся:
 *
 * .sdata:   "Small data". Секция для мелких инициализированных
 *           глобальных переменных. Доступ к этим данным может
 *           быть более эффективным (например, через один регистр
 *           указателя), что характерно для архитектуры MIPS.
 *
 * .sbss:    "Small bss". Аналогична .sdata, но для неинициализированных
 *           мелких данных (аналог .bss для "маленьких" переменных).
 *
 * .lit4:    Секция для 4-байтовых литералов (констант), используемых
 *           в коде.
 *
 * .lit8:    Секция для 8-байтовых литералов.
 *
 * .reginfo: Содержит информацию о использовании регистров, которая
 *           может быть полезна для отладки или оптимизации.
 *
 * .gptab:   Таблица для поддержки глобальных указателей,
 *           используется для доступа к .sdata и .sbss.
 *           Часто встречается в MIPS.
 *
 * .liblist: Список зависимостей от разделяемых библиотек.
 *
 * .conflict:Содержит информацию о конфликтах символов, которая
 *           используется компоновщиком для диагностики.
 *
 * .tdesc:   "Type descriptions". Может содержать описания типов
 *           для отладочной информации.
 *
 * * Примечание:
 *  Для получения информации о секциях, специфичных для конкретного
 *  процессора, обратитесь к дополнению psABI (processor-specific
 *  Application Binary Interface) для нужного процессора.
 */

